# Stubs for jaraco.collections (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
import collections
import six.moves

class Projection(collections.Mapping):
    def __init__(self, keys, space): ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def __len__(self): ...

class DictFilter:
    dict = ...  # type: Any
    specified_keys = ...  # type: Any
    include_pattern = ...  # type: Any
    pattern_keys = ...  # type: Any
    def __init__(self, dict, include_keys=..., include_pattern=None): ...
    def get_pattern_keys(self): ...
    @property
    def include_keys(self): ...
    def keys(self): ...
    def values(self): ...
    def __getitem__(self, i): ...
    def items(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

def dict_map(function, dictionary): ...

class RangeMap(dict):
    sort_params = ...  # type: Any
    match = ...  # type: Any
    def __init__(self, source, sort_params=..., key_match_comparator=...): ...
    def __getitem__(self, item): ...
    def get(self, key, default=None): ...
    def bounds(self): ...
    undefined_value = ...  # type: Any
    class Item(int): ...
    first_item = ...  # type: Any
    last_item = ...  # type: Any

def sorted_items(d, key=..., reverse=False): ...

class KeyTransformingDict(dict):
    @staticmethod
    def transform_key(key): ...
    def __init__(self, *args, **kargs): ...
    def __setitem__(self, key, val): ...
    def __getitem__(self, key): ...
    def __contains__(self, key): ...
    def __delitem__(self, key): ...
    def get(self, key, *args, **kwargs): ...
    def setdefault(self, key, *args, **kwargs): ...
    def pop(self, key, *args, **kwargs): ...
    def matching_key_for(self, key): ...

class FoldedCaseKeyedDict(KeyTransformingDict):
    @staticmethod
    def transform_key(key): ...

class DictAdapter:
    object = ...  # type: Any
    def __init__(self, wrapped_ob): ...
    def __getitem__(self, name): ...

class ItemsAsAttributes:
    def __getattr__(self, key): ...

def invert_map(map): ...

class IdentityOverrideMap(dict):
    def __missing__(self, key): ...

class DictStack(collections.Mapping):
    def keys(self): ...
    def __getitem__(self, key): ...
    push = ...  # type: Any

class BijectiveMap(dict):
    def __init__(self, *args, **kwargs): ...
    def __setitem__(self, item, value): ...
    def __delitem__(self, item): ...
    def __len__(self): ...
    def pop(self, key, *args, **kwargs): ...
    def update(self, *args, **kwargs): ...

class FrozenDict(collections.Mapping):
    def __new__(cls, *args, **kwargs): ...
    def __contains__(self, key): ...
    def __hash__(self): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __getitem__(self, key): ...
    def get(self, *args, **kwargs): ...
    def __eq__(self, other): ...
    def copy(self): ...

class Enumeration(ItemsAsAttributes, BijectiveMap):
    def __init__(self, names, codes=None): ...
    @property
    def names(self): ...
    @property
    def codes(self): ...

class Everything:
    def __contains__(self, other): ...

class InstrumentedDict(six.moves.UserDict):
    data = ...  # type: Any
    def __init__(self, data): ...

class Least:
    def __le__(self, other): ...
    __lt__ = ...  # type: Any
    def __ge__(self, other): ...
    __gt__ = ...  # type: Any

class Greatest:
    def __ge__(self, other): ...
    __gt__ = ...  # type: Any
    def __le__(self, other): ...
    __lt__ = ...  # type: Any
