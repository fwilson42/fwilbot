# Stubs for alembic.util.langhelpers (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from .compat import callable as callable, exec_ as exec_, string_types as string_types, with_metaclass as with_metaclass


class _ModuleClsMeta(type):

    def __setattr__(cls, key, value):
        ...


class ModuleClsProxy:

    @classmethod
    def create_module_class_proxy(cls, globals_, locals_):
        ...


def asbool(value):
    ...


def rev_id():
    ...


def to_list(x, default=None):
    ...


def to_tuple(x, default=None):
    ...


def unique_list(seq, hashfunc=None):
    ...


def dedupe_tuple(tup):
    ...


class memoized_property:
    fget = ...  # type: Any
    __doc__ = ...  # type: Any
    __name__ = ...  # type: Any

    def __init__(self, fget, doc=None):
        ...

    def __get__(self, obj, cls):
        ...


class immutabledict(dict):
    __delitem__ = ...  # type: Any
    __setitem__ = ...  # type: Any
    __setattr__ = ...  # type: Any
    clear = ...  # type: Any
    pop = ...  # type: Any
    popitem = ...  # type: Any
    setdefault = ...  # type: Any
    update = ...  # type: Any

    def __new__(cls, *args):
        ...

    def __init__(self, *args):
        ...

    def __reduce__(self):
        ...

    def union(self, d):
        ...


class Dispatcher:
    uselist = ...  # type: Any

    def __init__(self, uselist=False):
        ...

    def dispatch_for(self, target, qualifier=''):
        ...

    def dispatch(self, obj, qualifier=''):
        ...

    def branch(self):
        ...
