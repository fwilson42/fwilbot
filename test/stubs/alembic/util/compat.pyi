# Stubs for alembic.util.compat (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import io
from collections import namedtuple
from typing import Any, Optional

py27: Any
py2k: Any
py3k: Any
py35: Any
py36: Any

ArgSpec = namedtuple('ArgSpec', ['args', 'varargs', 'keywords', 'defaults'])

def inspect_getargspec(func: Any): ...

string_types: Any
binary_type = bytes
text_type = str

def callable(fn: Any): ...
def u(s: Any): ...
def ue(s: Any): ...
range = range
binary_type = str
text_type = unicode
callable = callable
range = xrange

def inspect_formatargspec(args: Any, varargs: Optional[Any] = ..., varkw: Optional[Any] = ..., defaults: Optional[Any] = ..., kwonlyargs: Any = ..., kwonlydefaults: Any = ..., annotations: Any = ..., formatarg: Any = ..., formatvarargs: Any = ..., formatvarkw: Any = ..., formatvalue: Any = ..., formatreturns: Any = ..., formatannotation: Any = ...): ...
def load_module_py(module_id: Any, path: Any): ...
def load_module_pyc(module_id: Any, path: Any): ...
def get_bytecode_suffixes(): ...
def get_current_bytecode_suffixes(): ...
def has_pep3147(): ...

exec_: Any

def with_metaclass(meta: Any, base: Any = ...): ...
def reraise(tp: Any, value: Any, tb: Optional[Any] = ..., cause: Optional[Any] = ...) -> None: ...
def raise_from_cause(exception: Any, exc_info: Optional[Any] = ...) -> None: ...

class EncodedIO(io.TextIOWrapper):
    def close(self) -> None: ...

class ActLikePy3kIO:
    readable: Any = ...
    seekable: Any = ...
    writable: Any = ...
    closed: bool = ...
    file_: Any = ...
    def __init__(self, file_: Any) -> None: ...
    def write(self, text: Any): ...
    def flush(self): ...

class EncodedIO(EncodedIO):
    def __init__(self, file_: Any, encoding: Any) -> None: ...
