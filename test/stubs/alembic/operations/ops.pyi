# Stubs for alembic.operations.ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ..util import sqla_compat
from .base import BatchOperations, Operations
from typing import Any, Optional

class MigrateOperation:
    def info(self): ...

class AddConstraintOp(MigrateOperation):
    add_constraint_ops: Any = ...
    @property
    def constraint_type(self) -> None: ...
    @classmethod
    def register_add_constraint(cls, type_: Any): ...
    @classmethod
    def from_constraint(cls, constraint: Any): ...
    def reverse(self): ...
    def to_diff_tuple(self): ...

class DropConstraintOp(MigrateOperation):
    constraint_name: Any = ...
    table_name: Any = ...
    constraint_type: Any = ...
    schema: Any = ...
    def __init__(self, constraint_name: Any, table_name: Any, type_: Optional[Any] = ..., schema: Optional[Any] = ..., _orig_constraint: Optional[Any] = ...) -> None: ...
    def reverse(self): ...
    def to_diff_tuple(self): ...
    @classmethod
    def from_constraint(cls, constraint: Any): ...
    def to_constraint(self): ...
    @classmethod
    def drop_constraint(cls, operations: Any, constraint_name: Any, table_name: Any, type_: Optional[Any] = ..., schema: Optional[Any] = ...): ...
    @classmethod
    def batch_drop_constraint(cls, operations: Any, constraint_name: Any, type_: Optional[Any] = ...): ...

class CreatePrimaryKeyOp(AddConstraintOp):
    constraint_type: str = ...
    constraint_name: Any = ...
    table_name: Any = ...
    columns: Any = ...
    schema: Any = ...
    kw: Any = ...
    def __init__(self, constraint_name: Any, table_name: Any, columns: Any, schema: Optional[Any] = ..., _orig_constraint: Optional[Any] = ..., **kw: Any) -> None: ...
    @classmethod
    def from_constraint(cls, constraint: Any): ...
    def to_constraint(self, migration_context: Optional[Any] = ...): ...
    @classmethod
    def create_primary_key(cls, operations: Any, constraint_name: Any, table_name: Any, columns: Any, schema: Optional[Any] = ...): ...
    @classmethod
    def batch_create_primary_key(cls, operations: Any, constraint_name: Any, columns: Any): ...

class CreateUniqueConstraintOp(AddConstraintOp):
    constraint_type: str = ...
    constraint_name: Any = ...
    table_name: Any = ...
    columns: Any = ...
    schema: Any = ...
    kw: Any = ...
    def __init__(self, constraint_name: Any, table_name: Any, columns: Any, schema: Optional[Any] = ..., _orig_constraint: Optional[Any] = ..., **kw: Any) -> None: ...
    @classmethod
    def from_constraint(cls, constraint: Any): ...
    def to_constraint(self, migration_context: Optional[Any] = ...): ...
    @classmethod
    def create_unique_constraint(cls, operations: Any, constraint_name: Any, table_name: Any, columns: Any, schema: Optional[Any] = ..., **kw: Any): ...
    @classmethod
    def batch_create_unique_constraint(cls, operations: Any, constraint_name: Any, columns: Any, **kw: Any): ...

class CreateForeignKeyOp(AddConstraintOp):
    constraint_type: str = ...
    constraint_name: Any = ...
    source_table: Any = ...
    referent_table: Any = ...
    local_cols: Any = ...
    remote_cols: Any = ...
    kw: Any = ...
    def __init__(self, constraint_name: Any, source_table: Any, referent_table: Any, local_cols: Any, remote_cols: Any, _orig_constraint: Optional[Any] = ..., **kw: Any) -> None: ...
    def to_diff_tuple(self): ...
    @classmethod
    def from_constraint(cls, constraint: Any): ...
    def to_constraint(self, migration_context: Optional[Any] = ...): ...
    @classmethod
    def create_foreign_key(cls, operations: Any, constraint_name: Any, source_table: Any, referent_table: Any, local_cols: Any, remote_cols: Any, onupdate: Optional[Any] = ..., ondelete: Optional[Any] = ..., deferrable: Optional[Any] = ..., initially: Optional[Any] = ..., match: Optional[Any] = ..., source_schema: Optional[Any] = ..., referent_schema: Optional[Any] = ..., **dialect_kw: Any): ...
    @classmethod
    def batch_create_foreign_key(cls, operations: Any, constraint_name: Any, referent_table: Any, local_cols: Any, remote_cols: Any, referent_schema: Optional[Any] = ..., onupdate: Optional[Any] = ..., ondelete: Optional[Any] = ..., deferrable: Optional[Any] = ..., initially: Optional[Any] = ..., match: Optional[Any] = ..., **dialect_kw: Any): ...

class CreateCheckConstraintOp(AddConstraintOp):
    constraint_type: str = ...
    constraint_name: Any = ...
    table_name: Any = ...
    condition: Any = ...
    schema: Any = ...
    kw: Any = ...
    def __init__(self, constraint_name: Any, table_name: Any, condition: Any, schema: Optional[Any] = ..., _orig_constraint: Optional[Any] = ..., **kw: Any) -> None: ...
    @classmethod
    def from_constraint(cls, constraint: Any): ...
    def to_constraint(self, migration_context: Optional[Any] = ...): ...
    @classmethod
    def create_check_constraint(cls, operations: Any, constraint_name: Any, table_name: Any, condition: Any, schema: Optional[Any] = ..., **kw: Any): ...
    @classmethod
    def batch_create_check_constraint(cls, operations: Any, constraint_name: Any, condition: Any, **kw: Any): ...

class CreateIndexOp(MigrateOperation):
    index_name: Any = ...
    table_name: Any = ...
    columns: Any = ...
    schema: Any = ...
    unique: Any = ...
    kw: Any = ...
    def __init__(self, index_name: Any, table_name: Any, columns: Any, schema: Optional[Any] = ..., unique: bool = ..., _orig_index: Optional[Any] = ..., **kw: Any) -> None: ...
    def reverse(self): ...
    def to_diff_tuple(self): ...
    @classmethod
    def from_index(cls, index: Any): ...
    def to_index(self, migration_context: Optional[Any] = ...): ...
    @classmethod
    def create_index(cls, operations: Any, index_name: Any, table_name: Any, columns: Any, schema: Optional[Any] = ..., unique: bool = ..., **kw: Any): ...
    @classmethod
    def batch_create_index(cls, operations: Any, index_name: Any, columns: Any, **kw: Any): ...

class DropIndexOp(MigrateOperation):
    index_name: Any = ...
    table_name: Any = ...
    schema: Any = ...
    kw: Any = ...
    def __init__(self, index_name: Any, table_name: Optional[Any] = ..., schema: Optional[Any] = ..., _orig_index: Optional[Any] = ..., **kw: Any) -> None: ...
    def to_diff_tuple(self): ...
    def reverse(self): ...
    @classmethod
    def from_index(cls, index: Any): ...
    def to_index(self, migration_context: Optional[Any] = ...): ...
    @classmethod
    def drop_index(cls, operations: Any, index_name: Any, table_name: Optional[Any] = ..., schema: Optional[Any] = ..., **kw: Any): ...
    @classmethod
    def batch_drop_index(cls, operations: Any, index_name: Any, **kw: Any): ...

class CreateTableOp(MigrateOperation):
    table_name: Any = ...
    columns: Any = ...
    schema: Any = ...
    kw: Any = ...
    def __init__(self, table_name: Any, columns: Any, schema: Optional[Any] = ..., _orig_table: Optional[Any] = ..., **kw: Any) -> None: ...
    def reverse(self): ...
    def to_diff_tuple(self): ...
    @classmethod
    def from_table(cls, table: Any): ...
    def to_table(self, migration_context: Optional[Any] = ...): ...
    @classmethod
    def create_table(cls, operations: Any, table_name: Any, *columns: Any, **kw: Any): ...

class DropTableOp(MigrateOperation):
    table_name: Any = ...
    schema: Any = ...
    table_kw: Any = ...
    def __init__(self, table_name: Any, schema: Optional[Any] = ..., table_kw: Optional[Any] = ..., _orig_table: Optional[Any] = ...) -> None: ...
    def to_diff_tuple(self): ...
    def reverse(self): ...
    @classmethod
    def from_table(cls, table: Any): ...
    def to_table(self, migration_context: Optional[Any] = ...): ...
    @classmethod
    def drop_table(cls, operations: Any, table_name: Any, schema: Optional[Any] = ..., **kw: Any) -> None: ...

class AlterTableOp(MigrateOperation):
    table_name: Any = ...
    schema: Any = ...
    def __init__(self, table_name: Any, schema: Optional[Any] = ...) -> None: ...

class RenameTableOp(AlterTableOp):
    new_table_name: Any = ...
    def __init__(self, old_table_name: Any, new_table_name: Any, schema: Optional[Any] = ...) -> None: ...
    @classmethod
    def rename_table(cls, operations: Any, old_table_name: Any, new_table_name: Any, schema: Optional[Any] = ...): ...

class CreateTableCommentOp(AlterTableOp):
    table_name: Any = ...
    comment: Any = ...
    existing_comment: Any = ...
    schema: Any = ...
    def __init__(self, table_name: Any, comment: Any, schema: Optional[Any] = ..., existing_comment: Optional[Any] = ...) -> None: ...
    @classmethod
    def create_table_comment(cls, operations: Any, table_name: Any, comment: Any, existing_comment: Optional[Any] = ..., schema: Optional[Any] = ...): ...
    def reverse(self): ...
    def to_table(self, migration_context: Optional[Any] = ...): ...
    def to_diff_tuple(self): ...

class DropTableCommentOp(AlterTableOp):
    table_name: Any = ...
    existing_comment: Any = ...
    schema: Any = ...
    def __init__(self, table_name: Any, schema: Optional[Any] = ..., existing_comment: Optional[Any] = ...) -> None: ...
    @classmethod
    def drop_table_comment(cls, operations: Any, table_name: Any, existing_comment: Optional[Any] = ..., schema: Optional[Any] = ...): ...
    def reverse(self): ...
    def to_table(self, migration_context: Optional[Any] = ...): ...
    def to_diff_tuple(self): ...

class AlterColumnOp(AlterTableOp):
    column_name: Any = ...
    existing_type: Any = ...
    existing_server_default: Any = ...
    existing_nullable: Any = ...
    existing_comment: Any = ...
    modify_nullable: Any = ...
    modify_comment: Any = ...
    modify_server_default: Any = ...
    modify_name: Any = ...
    modify_type: Any = ...
    kw: Any = ...
    def __init__(self, table_name: Any, column_name: Any, schema: Optional[Any] = ..., existing_type: Optional[Any] = ..., existing_server_default: bool = ..., existing_nullable: Optional[Any] = ..., existing_comment: Optional[Any] = ..., modify_nullable: Optional[Any] = ..., modify_comment: bool = ..., modify_server_default: bool = ..., modify_name: Optional[Any] = ..., modify_type: Optional[Any] = ..., **kw: Any) -> None: ...
    def to_diff_tuple(self): ...
    def has_changes(self): ...
    def reverse(self): ...
    @classmethod
    def alter_column(cls, operations: Any, table_name: Any, column_name: Any, nullable: Optional[Any] = ..., comment: bool = ..., server_default: bool = ..., new_column_name: Optional[Any] = ..., type_: Optional[Any] = ..., existing_type: Optional[Any] = ..., existing_server_default: bool = ..., existing_nullable: Optional[Any] = ..., existing_comment: Optional[Any] = ..., schema: Optional[Any] = ..., **kw: Any): ...
    @classmethod
    def batch_alter_column(cls, operations: Any, column_name: Any, nullable: Optional[Any] = ..., comment: bool = ..., server_default: bool = ..., new_column_name: Optional[Any] = ..., type_: Optional[Any] = ..., existing_type: Optional[Any] = ..., existing_server_default: bool = ..., existing_nullable: Optional[Any] = ..., existing_comment: Optional[Any] = ..., **kw: Any): ...

class AddColumnOp(AlterTableOp):
    column: Any = ...
    def __init__(self, table_name: Any, column: Any, schema: Optional[Any] = ...) -> None: ...
    def reverse(self): ...
    def to_diff_tuple(self): ...
    def to_column(self): ...
    @classmethod
    def from_column(cls, col: Any): ...
    @classmethod
    def from_column_and_tablename(cls, schema: Any, tname: Any, col: Any): ...
    @classmethod
    def add_column(cls, operations: Any, table_name: Any, column: Any, schema: Optional[Any] = ...): ...
    @classmethod
    def batch_add_column(cls, operations: Any, column: Any): ...

class DropColumnOp(AlterTableOp):
    column_name: Any = ...
    kw: Any = ...
    def __init__(self, table_name: Any, column_name: Any, schema: Optional[Any] = ..., _orig_column: Optional[Any] = ..., **kw: Any) -> None: ...
    def to_diff_tuple(self): ...
    def reverse(self): ...
    @classmethod
    def from_column_and_tablename(cls, schema: Any, tname: Any, col: Any): ...
    def to_column(self, migration_context: Optional[Any] = ...): ...
    @classmethod
    def drop_column(cls, operations: Any, table_name: Any, column_name: Any, schema: Optional[Any] = ..., **kw: Any): ...
    @classmethod
    def batch_drop_column(cls, operations: Any, column_name: Any, **kw: Any): ...

class BulkInsertOp(MigrateOperation):
    table: Any = ...
    rows: Any = ...
    multiinsert: Any = ...
    def __init__(self, table: Any, rows: Any, multiinsert: bool = ...) -> None: ...
    @classmethod
    def bulk_insert(cls, operations: Any, table: Any, rows: Any, multiinsert: bool = ...) -> None: ...

class ExecuteSQLOp(MigrateOperation):
    sqltext: Any = ...
    execution_options: Any = ...
    def __init__(self, sqltext: Any, execution_options: Optional[Any] = ...) -> None: ...
    @classmethod
    def execute(cls, operations: Any, sqltext: Any, execution_options: Optional[Any] = ...): ...

class OpContainer(MigrateOperation):
    ops: Any = ...
    def __init__(self, ops: Any = ...) -> None: ...
    def is_empty(self): ...
    def as_diffs(self): ...

class ModifyTableOps(OpContainer):
    table_name: Any = ...
    schema: Any = ...
    def __init__(self, table_name: Any, ops: Any, schema: Optional[Any] = ...) -> None: ...
    def reverse(self): ...

class UpgradeOps(OpContainer):
    upgrade_token: Any = ...
    def __init__(self, ops: Any = ..., upgrade_token: str = ...) -> None: ...
    def reverse_into(self, downgrade_ops: Any): ...
    def reverse(self): ...

class DowngradeOps(OpContainer):
    downgrade_token: Any = ...
    def __init__(self, ops: Any = ..., downgrade_token: str = ...) -> None: ...
    def reverse(self): ...

class MigrationScript(MigrateOperation):
    rev_id: Any = ...
    message: Any = ...
    imports: Any = ...
    head: Any = ...
    splice: Any = ...
    branch_label: Any = ...
    version_path: Any = ...
    depends_on: Any = ...
    upgrade_ops: Any = ...
    downgrade_ops: Any = ...
    def __init__(self, rev_id: Any, upgrade_ops: Any, downgrade_ops: Any, message: Optional[Any] = ..., imports: Any = ..., head: Optional[Any] = ..., splice: Optional[Any] = ..., branch_label: Optional[Any] = ..., version_path: Optional[Any] = ..., depends_on: Optional[Any] = ...) -> None: ...
    @property
    def upgrade_ops(self): ...
    @upgrade_ops.setter
    def upgrade_ops(self, upgrade_ops: Any) -> None: ...
    @property
    def downgrade_ops(self): ...
    @downgrade_ops.setter
    def downgrade_ops(self, downgrade_ops: Any) -> None: ...
    @property
    def upgrade_ops_list(self): ...
    @property
    def downgrade_ops_list(self): ...
