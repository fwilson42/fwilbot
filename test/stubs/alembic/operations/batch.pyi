# Stubs for alembic.operations.batch (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ..util.sqla_compat import _columns_for_constraint, _fk_is_self_referential, _is_type_bound, _remove_column_from_collection
from typing import Any, Optional

class BatchOperationsImpl:
    operations: Any = ...
    table_name: Any = ...
    schema: Any = ...
    recreate: Any = ...
    copy_from: Any = ...
    table_args: Any = ...
    table_kwargs: Any = ...
    reflect_args: Any = ...
    reflect_kwargs: Any = ...
    naming_convention: Any = ...
    batch: Any = ...
    def __init__(self, operations: Any, table_name: Any, schema: Any, recreate: Any, copy_from: Any, table_args: Any, table_kwargs: Any, reflect_args: Any, reflect_kwargs: Any, naming_convention: Any) -> None: ...
    @property
    def dialect(self): ...
    @property
    def impl(self): ...
    def flush(self) -> None: ...
    def alter_column(self, *arg: Any, **kw: Any) -> None: ...
    def add_column(self, *arg: Any, **kw: Any) -> None: ...
    def drop_column(self, *arg: Any, **kw: Any) -> None: ...
    def add_constraint(self, const: Any) -> None: ...
    def drop_constraint(self, const: Any) -> None: ...
    def rename_table(self, *arg: Any, **kw: Any) -> None: ...
    def create_index(self, idx: Any) -> None: ...
    def drop_index(self, idx: Any) -> None: ...
    def create_table(self, table: Any) -> None: ...
    def drop_table(self, table: Any) -> None: ...

class ApplyBatchImpl:
    table: Any = ...
    table_args: Any = ...
    table_kwargs: Any = ...
    temp_table_name: Any = ...
    new_table: Any = ...
    column_transfers: Any = ...
    reflected: Any = ...
    def __init__(self, table: Any, table_args: Any, table_kwargs: Any, reflected: Any) -> None: ...
    def alter_column(self, table_name: Any, column_name: Any, nullable: Optional[Any] = ..., server_default: bool = ..., name: Optional[Any] = ..., type_: Optional[Any] = ..., autoincrement: Optional[Any] = ..., **kw: Any) -> None: ...
    def add_column(self, table_name: Any, column: Any, **kw: Any) -> None: ...
    def drop_column(self, table_name: Any, column: Any, **kw: Any) -> None: ...
    def add_constraint(self, const: Any) -> None: ...
    def drop_constraint(self, const: Any) -> None: ...
    def create_index(self, idx: Any) -> None: ...
    def drop_index(self, idx: Any) -> None: ...
    def rename_table(self, *arg: Any, **kw: Any) -> None: ...
