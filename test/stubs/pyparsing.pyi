# Stubs for pyparsing (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from weakref import ref as wkref
from collections import OrderedDict as _OrderedDict

class _Constants: ...

alphas = ...  # type: Any
nums = ...  # type: Any
hexnums = ...  # type: Any
alphanums = ...  # type: Any
printables = ...  # type: Any

class ParseBaseException(Exception):
    loc = ...  # type: Any
    msg = ...  # type: Any
    pstr = ...  # type: Any
    parserElement = ...  # type: Any
    args = ...  # type: Any
    def __init__(self, pstr, loc=0, msg=None, elem=None): ...
    def __getattr__(self, aname): ...
    def markInputline(self, markerString=''): ...
    def __dir__(self): ...

class ParseException(ParseBaseException): ...
class ParseFatalException(ParseBaseException): ...
class ParseSyntaxException(ParseFatalException): ...

class RecursiveGrammarException(Exception):
    parseElementTrace = ...  # type: Any
    def __init__(self, parseElementList): ...

class _ParseResultsWithOffset:
    tup = ...  # type: Any
    def __init__(self, p1, p2): ...
    def __getitem__(self, i): ...
    def setOffset(self, i): ...

class ParseResults:
    def __new__(cls, toklist=None, name=None, asList=True, modal=True): ...
    def __init__(self, toklist=None, name=None, asList=True, modal=True, isinstance=...): ...
    def __getitem__(self, i): ...
    def __setitem__(self, k, v, isinstance=...): ...
    def __delitem__(self, i): ...
    def __contains__(self, k): ...
    def __len__(self): ...
    def __bool__(self): ...
    __nonzero__ = ...  # type: Any
    def __iter__(self): ...
    def __reversed__(self): ...
    iterkeys = ...  # type: Any
    itervalues = ...  # type: Any
    iteritems = ...  # type: Any
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def haskeys(self): ...
    def pop(self, *args, **kwargs): ...
    def get(self, key, defaultValue=None): ...
    def insert(self, index, insStr): ...
    def append(self, item): ...
    def extend(self, itemseq): ...
    def clear(self): ...
    def __getattr__(self, name): ...
    def __add__(self, other): ...
    def __iadd__(self, other): ...
    def __radd__(self, other): ...
    def asList(self): ...
    def asDict(self): ...
    def copy(self): ...
    def asXML(self, doctag=None, namedItemsOnly=False, indent='', formatted=True): ...
    def getName(self): ...
    def dump(self, indent='', depth=0, full=True): ...
    def pprint(self, *args, **kwargs): ...
    def __getnewargs__(self): ...
    def __dir__(self): ...

def col(loc, strg): ...
def lineno(loc, strg): ...
def line(loc, strg): ...
def nullDebugAction(*args): ...

class ParserElement:
    DEFAULT_WHITE_CHARS = ...  # type: Any
    verbose_stacktrace = ...  # type: Any
    @staticmethod
    def setDefaultWhitespaceChars(chars): ...
    @staticmethod
    def inlineLiteralsUsing(cls): ...
    parseAction = ...  # type: Any
    failAction = ...  # type: Any
    strRepr = ...  # type: Any
    resultsName = ...  # type: Any
    saveAsList = ...  # type: Any
    skipWhitespace = ...  # type: Any
    whiteChars = ...  # type: Any
    copyDefaultWhiteChars = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    keepTabs = ...  # type: Any
    ignoreExprs = ...  # type: Any
    debug = ...  # type: Any
    streamlined = ...  # type: Any
    mayIndexError = ...  # type: Any
    errmsg = ...  # type: Any
    modalResults = ...  # type: Any
    debugActions = ...  # type: Any
    re = ...  # type: Any
    callPreparse = ...  # type: Any
    callDuringTry = ...  # type: Any
    def __init__(self, savelist=False): ...
    def copy(self): ...
    name = ...  # type: Any
    def setName(self, name): ...
    def setResultsName(self, name, listAllMatches=False): ...
    def setBreak(self, breakFlag=True): ...
    def setParseAction(self, *fns, **kwargs): ...
    def addParseAction(self, *fns, **kwargs): ...
    def addCondition(self, *fns, **kwargs): ...
    def setFailAction(self, fn): ...
    def preParse(self, instring, loc): ...
    def parseImpl(self, instring, loc, doActions=True): ...
    def postParse(self, instring, loc, tokenlist): ...
    def tryParse(self, instring, loc): ...
    def canParseNext(self, instring, loc): ...
    class _UnboundedCache:
        not_in_cache = ...  # type: Any
        get = ...  # type: Any
        set = ...  # type: Any
        clear = ...  # type: Any
        def __init__(self): ...
    class _FifoCache:
        not_in_cache = ...  # type: Any
        get = ...  # type: Any
        set = ...  # type: Any
        clear = ...  # type: Any
        def __init__(self, size): ...
    class _FifoCache:
        not_in_cache = ...  # type: Any
        get = ...  # type: Any
        set = ...  # type: Any
        clear = ...  # type: Any
        def __init__(self, size): ...
    packrat_cache = ...  # type: Any
    packrat_cache_lock = ...  # type: Any
    packrat_cache_stats = ...  # type: Any
    @staticmethod
    def resetCache(): ...
    @staticmethod
    def enablePackrat(cache_size_limit=128): ...
    def parseString(self, instring, parseAll=False): ...
    def scanString(self, instring, maxMatches=..., overlap=False): ...
    def transformString(self, instring): ...
    def searchString(self, instring, maxMatches=...): ...
    def split(self, instring, maxsplit=..., includeSeparators=False): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __or__(self, other): ...
    def __ror__(self, other): ...
    def __xor__(self, other): ...
    def __rxor__(self, other): ...
    def __and__(self, other): ...
    def __rand__(self, other): ...
    def __invert__(self): ...
    def __call__(self, name=None): ...
    def suppress(self): ...
    def leaveWhitespace(self): ...
    def setWhitespaceChars(self, chars): ...
    def parseWithTabs(self): ...
    def ignore(self, other): ...
    def setDebugActions(self, startAction, successAction, exceptionAction): ...
    def setDebug(self, flag=True): ...
    def streamline(self): ...
    def checkRecursion(self, parseElementList): ...
    def validate(self, validateTrace=...): ...
    def parseFile(self, file_or_filename, parseAll=False): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    def __req__(self, other): ...
    def __rne__(self, other): ...
    def matches(self, testString, parseAll=True): ...
    def runTests(self, tests, parseAll=True, comment='', fullDump=True, printResults=True, failureTests=False): ...

class Token(ParserElement):
    def __init__(self): ...

class Empty(Token):
    name = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    mayIndexError = ...  # type: Any
    def __init__(self): ...

class NoMatch(Token):
    name = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    mayIndexError = ...  # type: Any
    errmsg = ...  # type: Any
    def __init__(self): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class Literal(Token):
    match = ...  # type: Any
    matchLen = ...  # type: Any
    firstMatchChar = ...  # type: Any
    __class__ = ...  # type: Any
    name = ...  # type: Any
    errmsg = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    mayIndexError = ...  # type: Any
    def __init__(self, matchString): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class Keyword(Token):
    DEFAULT_KEYWORD_CHARS = ...  # type: Any
    match = ...  # type: Any
    matchLen = ...  # type: Any
    firstMatchChar = ...  # type: Any
    name = ...  # type: Any
    errmsg = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    mayIndexError = ...  # type: Any
    caseless = ...  # type: Any
    caselessmatch = ...  # type: Any
    identChars = ...  # type: Any
    def __init__(self, matchString, identChars=None, caseless=False): ...
    def parseImpl(self, instring, loc, doActions=True): ...
    def copy(self): ...
    @staticmethod
    def setDefaultKeywordChars(chars): ...

class CaselessLiteral(Literal):
    returnString = ...  # type: Any
    name = ...  # type: Any
    errmsg = ...  # type: Any
    def __init__(self, matchString): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class CaselessKeyword(Keyword):
    def __init__(self, matchString, identChars=None): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class CloseMatch(Token):
    name = ...  # type: Any
    match_string = ...  # type: Any
    maxMismatches = ...  # type: Any
    errmsg = ...  # type: Any
    mayIndexError = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    def __init__(self, match_string, maxMismatches=1): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class Word(Token):
    initCharsOrig = ...  # type: Any
    initChars = ...  # type: Any
    bodyCharsOrig = ...  # type: Any
    bodyChars = ...  # type: Any
    maxSpecified = ...  # type: Any
    minLen = ...  # type: Any
    maxLen = ...  # type: Any
    name = ...  # type: Any
    errmsg = ...  # type: Any
    mayIndexError = ...  # type: Any
    asKeyword = ...  # type: Any
    reString = ...  # type: Any
    re = ...  # type: Any
    def __init__(self, initChars, bodyChars=None, min=1, max=0, exact=0, asKeyword=False, excludeChars=None): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class Regex(Token):
    compiledREtype = ...  # type: Any
    pattern = ...  # type: Any
    flags = ...  # type: Any
    re = ...  # type: Any
    reString = ...  # type: Any
    name = ...  # type: Any
    errmsg = ...  # type: Any
    mayIndexError = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    def __init__(self, pattern, flags=0): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class QuotedString(Token):
    quoteChar = ...  # type: Any
    quoteCharLen = ...  # type: Any
    firstQuoteChar = ...  # type: Any
    endQuoteChar = ...  # type: Any
    endQuoteCharLen = ...  # type: Any
    escChar = ...  # type: Any
    escQuote = ...  # type: Any
    unquoteResults = ...  # type: Any
    convertWhitespaceEscapes = ...  # type: Any
    flags = ...  # type: Any
    pattern = ...  # type: Any
    escCharReplacePattern = ...  # type: Any
    re = ...  # type: Any
    reString = ...  # type: Any
    name = ...  # type: Any
    errmsg = ...  # type: Any
    mayIndexError = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    def __init__(self, quoteChar, escChar=None, escQuote=None, multiline=False, unquoteResults=True, endQuoteChar=None, convertWhitespaceEscapes=True): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class CharsNotIn(Token):
    skipWhitespace = ...  # type: Any
    notChars = ...  # type: Any
    minLen = ...  # type: Any
    maxLen = ...  # type: Any
    name = ...  # type: Any
    errmsg = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    mayIndexError = ...  # type: Any
    def __init__(self, notChars, min=1, max=0, exact=0): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class White(Token):
    whiteStrs = ...  # type: Any
    matchWhite = ...  # type: Any
    name = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    errmsg = ...  # type: Any
    minLen = ...  # type: Any
    maxLen = ...  # type: Any
    def __init__(self, ws='', min=1, max=0, exact=0): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class _PositionToken(Token):
    name = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    mayIndexError = ...  # type: Any
    def __init__(self): ...

class GoToColumn(_PositionToken):
    col = ...  # type: Any
    def __init__(self, colno): ...
    def preParse(self, instring, loc): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class LineStart(_PositionToken):
    errmsg = ...  # type: Any
    def __init__(self): ...
    def preParse(self, instring, loc): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class LineEnd(_PositionToken):
    errmsg = ...  # type: Any
    def __init__(self): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class StringStart(_PositionToken):
    errmsg = ...  # type: Any
    def __init__(self): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class StringEnd(_PositionToken):
    errmsg = ...  # type: Any
    def __init__(self): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class WordStart(_PositionToken):
    wordChars = ...  # type: Any
    errmsg = ...  # type: Any
    def __init__(self, wordChars=...): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class WordEnd(_PositionToken):
    wordChars = ...  # type: Any
    skipWhitespace = ...  # type: Any
    errmsg = ...  # type: Any
    def __init__(self, wordChars=...): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class ParseExpression(ParserElement):
    exprs = ...  # type: Any
    callPreparse = ...  # type: Any
    def __init__(self, exprs, savelist=False): ...
    def __getitem__(self, i): ...
    strRepr = ...  # type: Any
    def append(self, other): ...
    skipWhitespace = ...  # type: Any
    def leaveWhitespace(self): ...
    def ignore(self, other): ...
    errmsg = ...  # type: Any
    def streamline(self): ...
    def setResultsName(self, name, listAllMatches=False): ...
    def validate(self, validateTrace=...): ...
    def copy(self): ...

class And(ParseExpression):
    class _ErrorStop(Empty):
        name = ...  # type: Any
        def __init__(self, *args, **kwargs): ...
    mayReturnEmpty = ...  # type: Any
    skipWhitespace = ...  # type: Any
    callPreparse = ...  # type: Any
    def __init__(self, exprs, savelist=True): ...
    def parseImpl(self, instring, loc, doActions=True): ...
    def __iadd__(self, other): ...
    def checkRecursion(self, parseElementList): ...

class Or(ParseExpression):
    mayReturnEmpty = ...  # type: Any
    def __init__(self, exprs, savelist=False): ...
    def parseImpl(self, instring, loc, doActions=True): ...
    def __ixor__(self, other): ...
    def checkRecursion(self, parseElementList): ...

class MatchFirst(ParseExpression):
    mayReturnEmpty = ...  # type: Any
    def __init__(self, exprs, savelist=False): ...
    def parseImpl(self, instring, loc, doActions=True): ...
    def __ior__(self, other): ...
    def checkRecursion(self, parseElementList): ...

class Each(ParseExpression):
    mayReturnEmpty = ...  # type: Any
    skipWhitespace = ...  # type: Any
    initExprGroups = ...  # type: Any
    def __init__(self, exprs, savelist=True): ...
    opt1map = ...  # type: Any
    optionals = ...  # type: Any
    multioptionals = ...  # type: Any
    multirequired = ...  # type: Any
    required = ...  # type: Any
    def parseImpl(self, instring, loc, doActions=True): ...
    def checkRecursion(self, parseElementList): ...

class ParseElementEnhance(ParserElement):
    expr = ...  # type: Any
    strRepr = ...  # type: Any
    mayIndexError = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    skipWhitespace = ...  # type: Any
    saveAsList = ...  # type: Any
    callPreparse = ...  # type: Any
    def __init__(self, expr, savelist=False): ...
    def parseImpl(self, instring, loc, doActions=True): ...
    def leaveWhitespace(self): ...
    def ignore(self, other): ...
    def streamline(self): ...
    def checkRecursion(self, parseElementList): ...
    def validate(self, validateTrace=...): ...

class FollowedBy(ParseElementEnhance):
    mayReturnEmpty = ...  # type: Any
    def __init__(self, expr): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class NotAny(ParseElementEnhance):
    skipWhitespace = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    errmsg = ...  # type: Any
    def __init__(self, expr): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class _MultipleMatch(ParseElementEnhance):
    not_ender = ...  # type: Any
    def __init__(self, expr, stopOn=None): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class OneOrMore(_MultipleMatch):
    def setResultsName(self, name, listAllMatches=False): ...

class ZeroOrMore(_MultipleMatch):
    mayReturnEmpty = ...  # type: Any
    def __init__(self, expr, stopOn=None): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class _NullToken:
    def __bool__(self): ...
    __nonzero__ = ...  # type: Any

class Optional(ParseElementEnhance):
    defaultValue = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    def __init__(self, expr, default=...): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class SkipTo(ParseElementEnhance):
    ignoreExpr = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    mayIndexError = ...  # type: Any
    includeMatch = ...  # type: Any
    asList = ...  # type: Any
    failOn = ...  # type: Any
    errmsg = ...  # type: Any
    def __init__(self, other, include=False, ignore=None, failOn=None): ...
    def parseImpl(self, instring, loc, doActions=True): ...

class Forward(ParseElementEnhance):
    def __init__(self, other=None): ...
    expr = ...  # type: Any
    strRepr = ...  # type: Any
    mayIndexError = ...  # type: Any
    mayReturnEmpty = ...  # type: Any
    skipWhitespace = ...  # type: Any
    saveAsList = ...  # type: Any
    def __lshift__(self, other): ...
    def __ilshift__(self, other): ...
    def leaveWhitespace(self): ...
    streamlined = ...  # type: Any
    def streamline(self): ...
    def validate(self, validateTrace=...): ...
    def copy(self): ...

class _ForwardNoRecurse(Forward): ...

class TokenConverter(ParseElementEnhance):
    saveAsList = ...  # type: Any
    def __init__(self, expr, savelist=False): ...

class Combine(TokenConverter):
    adjacent = ...  # type: Any
    skipWhitespace = ...  # type: Any
    joinString = ...  # type: Any
    callPreparse = ...  # type: Any
    def __init__(self, expr, joinString='', adjacent=True): ...
    def ignore(self, other): ...
    def postParse(self, instring, loc, tokenlist): ...

class Group(TokenConverter):
    saveAsList = ...  # type: Any
    def __init__(self, expr): ...
    def postParse(self, instring, loc, tokenlist): ...

class Dict(TokenConverter):
    saveAsList = ...  # type: Any
    def __init__(self, expr): ...
    def postParse(self, instring, loc, tokenlist): ...

class Suppress(TokenConverter):
    def postParse(self, instring, loc, tokenlist): ...
    def suppress(self): ...

class OnlyOnce:
    callable = ...  # type: Any
    called = ...  # type: Any
    def __init__(self, methodCall): ...
    def __call__(self, s, l, t): ...
    def reset(self): ...

def traceParseAction(f): ...
def delimitedList(expr, delim='', combine=False): ...
def countedArray(expr, intExpr=None): ...
def matchPreviousLiteral(expr): ...
def matchPreviousExpr(expr): ...
def oneOf(strs, caseless=False, useRegex=True): ...
def dictOf(key, value): ...
def originalTextFor(expr, asString=True): ...
def ungroup(expr): ...
def locatedExpr(expr): ...

empty = ...  # type: Any
lineStart = ...  # type: Any
lineEnd = ...  # type: Any
stringStart = ...  # type: Any
stringEnd = ...  # type: Any

def srange(s): ...
def matchOnlyAtCol(n): ...
def replaceWith(replStr): ...
def removeQuotes(s, l, t): ...
def tokenMap(func, *args): ...

upcaseTokens = ...  # type: Any
downcaseTokens = ...  # type: Any

def makeHTMLTags(tagStr): ...
def makeXMLTags(tagStr): ...
def withAttribute(*args, **attrDict): ...
def withClass(classname, namespace=''): ...

opAssoc = ...  # type: Any

def infixNotation(baseExpr, opList, lpar=..., rpar=...): ...

operatorPrecedence = ...  # type: Any
dblQuotedString = ...  # type: Any
sglQuotedString = ...  # type: Any
quotedString = ...  # type: Any
unicodeString = ...  # type: Any

def nestedExpr(opener='', closer='', content=None, ignoreExpr=...): ...
def indentedBlock(blockStatementExpr, indentStack, indent=True): ...

alphas8bit = ...  # type: Any
punc8bit = ...  # type: Any
anyOpenTag = ...  # type: Any
anyCloseTag = ...  # type: Any
commonHTMLEntity = ...  # type: Any

def replaceHTMLEntity(t): ...

cStyleComment = ...  # type: Any
htmlComment = ...  # type: Any
restOfLine = ...  # type: Any
dblSlashComment = ...  # type: Any
cppStyleComment = ...  # type: Any
javaStyleComment = ...  # type: Any
pythonStyleComment = ...  # type: Any
commaSeparatedList = ...  # type: Any

class pyparsing_common:
    convertToInteger = ...  # type: Any
    convertToFloat = ...  # type: Any
    integer = ...  # type: Any
    hex_integer = ...  # type: Any
    signed_integer = ...  # type: Any
    fraction = ...  # type: Any
    mixed_integer = ...  # type: Any
    real = ...  # type: Any
    sci_real = ...  # type: Any
    number = ...  # type: Any
    fnumber = ...  # type: Any
    identifier = ...  # type: Any
    ipv4_address = ...  # type: Any
    ipv6_address = ...  # type: Any
    mac_address = ...  # type: Any
    @staticmethod
    def convertToDate(fmt=''): ...
    @staticmethod
    def convertToDatetime(fmt=''): ...
    iso8601_date = ...  # type: Any
    iso8601_datetime = ...  # type: Any
    uuid = ...  # type: Any
    @staticmethod
    def stripHTMLTags(s, l, tokens): ...
    comma_separated_list = ...  # type: Any
    upcaseTokens = ...  # type: Any
    downcaseTokens = ...  # type: Any
