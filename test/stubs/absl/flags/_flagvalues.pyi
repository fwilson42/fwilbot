# Stubs for absl.flags._flagvalues (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class FlagValues:
    def __init__(self) -> None: ...
    def set_gnu_getopt(self, gnu_getopt: bool = ...) -> None: ...
    def is_gnu_getopt(self): ...
    def flags_by_module_dict(self): ...
    def flags_by_module_id_dict(self): ...
    def key_flags_by_module_dict(self): ...
    def register_flag_by_module(self, module_name: Any, flag: Any) -> None: ...
    def register_flag_by_module_id(self, module_id: Any, flag: Any) -> None: ...
    def register_key_flag_for_module(self, module_name: Any, flag: Any) -> None: ...
    def get_key_flags_for_module(self, module: Any): ...
    def find_module_defining_flag(self, flagname: Any, default: Optional[Any] = ...): ...
    def find_module_id_defining_flag(self, flagname: Any, default: Optional[Any] = ...): ...
    def append_flag_values(self, flag_values: Any) -> None: ...
    def remove_flag_values(self, flag_values: Any) -> None: ...
    def __setitem__(self, name: Any, flag: Any) -> None: ...
    def __dir__(self): ...
    def __getitem__(self, name: Any): ...
    def __getattr__(self, name: Any): ...
    def __setattr__(self, name: Any, value: Any): ...
    def __delattr__(self, flag_name: Any) -> None: ...
    def set_default(self, name: Any, value: Any) -> None: ...
    def __contains__(self, name: Any): ...
    def __len__(self): ...
    def __iter__(self): ...
    def __call__(self, argv: Any, known_only: bool = ...): ...
    def __copy__(self) -> None: ...
    def __deepcopy__(self, memo: Any): ...
    def is_parsed(self): ...
    def mark_as_parsed(self) -> None: ...
    def unparse_flags(self) -> None: ...
    def flag_values_dict(self): ...
    def get_help(self, prefix: str = ..., include_special_flags: bool = ...): ...
    def module_help(self, module: Any): ...
    def main_module_help(self): ...
    def get_flag_value(self, name: Any, default: Any): ...
    def read_flags_from_files(self, argv: Any, force_gnu: bool = ...): ...
    def flags_into_string(self): ...
    def append_flags_into_file(self, filename: Any) -> None: ...
    def write_help_in_xml_format(self, outfile: Optional[Any] = ...) -> None: ...

FLAGS: Any
