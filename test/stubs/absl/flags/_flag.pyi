# Stubs for absl.flags._flag (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional


class Flag:
    name: Any = ...
    help: Any = ...
    short_name: Any = ...
    boolean: Any = ...
    present: int = ...
    parser: Any = ...
    serializer: Any = ...
    allow_override: Any = ...
    allow_override_cpp: Any = ...
    allow_hide_cpp: Any = ...
    allow_overwrite: Any = ...
    allow_using_method_names: Any = ...
    using_default_value: bool = ...
    validators: Any = ...

    def __init__(self,
                 parser: Any,
                 serializer: Any,
                 name: Any,
                 default: Any,
                 help_string: Any,
                 short_name: Optional[Any] = ...,
                 boolean: bool = ...,
                 allow_override: bool = ...,
                 allow_override_cpp: bool = ...,
                 allow_hide_cpp: bool = ...,
                 allow_overwrite: bool = ...,
                 allow_using_method_names: bool = ...) -> None:
        ...

    @property
    def value(self):
        ...

    @value.setter
    def value(self, value: Any) -> None:
        ...

    def __hash__(self):
        ...

    def __eq__(self, other: Any):
        ...

    def __lt__(self, other: Any):
        ...

    def __copy__(self) -> None:
        ...

    def __deepcopy__(self, memo: Any):
        ...

    value: Any = ...

    def parse(self, argument: Any) -> None:
        ...

    def unparse(self) -> None:
        ...

    def serialize(self):
        ...

    def flag_type(self):
        ...


class BooleanFlag(Flag):

    def __init__(self, name: Any, default: Any, help: Any, short_name: Optional[Any] = ..., **args: Any) -> None:
        ...


class EnumFlag(Flag):
    help: Any = ...

    def __init__(self, name: Any, default: Any, help: Any, enum_values: Any, short_name: Optional[Any] = ..., case_sensitive: bool = ...,
                 **args: Any) -> None:
        ...


class EnumClassFlag(Flag):
    help: Any = ...

    def __init__(self, name: Any, default: Any, help: Any, enum_class: Any, short_name: Optional[Any] = ..., **args: Any) -> None:
        ...


class MultiFlag(Flag):

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        ...

    value: Any = ...

    def parse(self, arguments: Any) -> None:
        ...

    def flag_type(self):
        ...


class MultiEnumClassFlag(MultiFlag):
    help: Any = ...

    def __init__(self, name: Any, default: Any, help_string: Any, enum_class: Any, **args: Any) -> None:
        ...
