# Stubs for absl.logging (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import logging
from absl import flags
from typing import Any, Optional

FLAGS: Any
FATAL: Any
ERROR: Any
WARNING: Any
WARN: Any
INFO: Any
DEBUG: Any
ABSL_LOGGING_PREFIX_REGEX: str


class _VerbosityFlag(flags.Flag):

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        ...

    @property
    def value(self):
        ...

    @value.setter
    def value(self, v: Any) -> None:
        ...


class _StderrthresholdFlag(flags.Flag):

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        ...

    @property
    def value(self):
        ...

    @value.setter
    def value(self, v: Any) -> None:
        ...


def get_verbosity():
    ...


def set_verbosity(v: Any) -> None:
    ...


def set_stderrthreshold(s: Any) -> None:
    ...


def fatal(msg: Any, *args: Any, **kwargs: Any) -> None:
    ...


def error(msg: Any, *args: Any, **kwargs: Any) -> None:
    ...


def warning(msg: Any, *args: Any, **kwargs: Any) -> None:
    ...


warn = warning


def info(msg: Any, *args: Any, **kwargs: Any) -> None:
    ...


def debug(msg: Any, *args: Any, **kwargs: Any) -> None:
    ...


def exception(msg: Any, *args: Any) -> None:
    ...


def log_every_n(level: Any, msg: Any, n: Any, *args: Any) -> None:
    ...


def log_every_n_seconds(level: Any, msg: Any, n_seconds: Any, *args: Any) -> None:
    ...


def log_first_n(level: Any, msg: Any, n: Any, *args: Any) -> None:
    ...


def log_if(level: Any, msg: Any, condition: Any, *args: Any) -> None:
    ...


def log(level: Any, msg: Any, *args: Any, **kwargs: Any) -> None:
    ...


def vlog(level: Any, msg: Any, *args: Any, **kwargs: Any) -> None:
    ...


def flush() -> None:
    ...


def level_debug():
    ...


def level_info():
    ...


def level_warning():
    ...


level_warn = level_warning


def level_error():
    ...


def get_log_file_name(level: Any = ...):
    ...


def find_log_dir_and_names(program_name: Optional[Any] = ..., log_dir: Optional[Any] = ...):
    ...


def find_log_dir(log_dir: Optional[Any] = ...):
    ...


def get_absl_log_prefix(record: Any):
    ...


def skip_log_prefix(func: Any):
    ...


class PythonHandler(logging.StreamHandler):

    def __init__(self, stream: Optional[Any] = ..., formatter: Optional[Any] = ...) -> None:
        ...

    stream: Any = ...

    def start_logging_to_file(self, program_name: Optional[Any] = ..., log_dir: Optional[Any] = ...) -> None:
        ...

    def use_absl_log_file(self, program_name: Optional[Any] = ..., log_dir: Optional[Any] = ...) -> None:
        ...

    def flush(self) -> None:
        ...

    def emit(self, record: Any) -> None:
        ...

    def close(self) -> None:
        ...


class ABSLHandler(logging.Handler):

    def __init__(self, python_logging_formatter: Any) -> None:
        ...

    def format(self, record: Any):
        ...

    def setFormatter(self, fmt: Any) -> None:
        ...

    def emit(self, record: Any) -> None:
        ...

    def flush(self) -> None:
        ...

    def close(self) -> None:
        ...

    def handle(self, record: Any):
        ...

    @property
    def python_handler(self):
        ...

    def activate_python_handler(self) -> None:
        ...

    def use_absl_log_file(self, program_name: Optional[Any] = ..., log_dir: Optional[Any] = ...) -> None:
        ...

    def start_logging_to_file(self, program_name: Optional[Any] = ..., log_dir: Optional[Any] = ...) -> None:
        ...


class PythonFormatter(logging.Formatter):

    def format(self, record: Any):
        ...


class ABSLLogger:

    def findCaller(self, stack_info: bool = ...):
        ...

    def critical(self, msg: Any, *args: Any, **kwargs: Any) -> None:
        ...

    def fatal(self, msg: Any, *args: Any, **kwargs: Any) -> None:
        ...

    def error(self, msg: Any, *args: Any, **kwargs: Any) -> None:
        ...

    def warn(self, msg: Any, *args: Any, **kwargs: Any) -> None:
        ...

    def warning(self, msg: Any, *args: Any, **kwargs: Any) -> None:
        ...

    def info(self, msg: Any, *args: Any, **kwargs: Any) -> None:
        ...

    def debug(self, msg: Any, *args: Any, **kwargs: Any) -> None:
        ...

    def log(self, level: Any, msg: Any, *args: Any, **kwargs: Any) -> None:
        ...

    def handle(self, record: Any) -> None:
        ...

    @classmethod
    def register_frame_to_skip(cls, file_name: Any, function_name: Any, line_number: Optional[Any] = ...) -> None:
        ...


def get_absl_logger():
    ...


def get_absl_handler():
    ...


def use_python_logging(quiet: bool = ...) -> None:
    ...


def use_absl_handler() -> None:
    ...
