# Stubs for jinja2.environment (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

def get_spontaneous_environment(*args): ...
def create_cache(size): ...
def copy_cache(cache): ...
def load_extensions(environment, extensions): ...

class Environment:
    sandboxed = ...  # type: Any
    overlayed = ...  # type: Any
    linked_to = ...  # type: Any
    shared = ...  # type: Any
    exception_handler = ...  # type: Any
    exception_formatter = ...  # type: Any
    code_generator_class = ...  # type: Any
    context_class = ...  # type: Any
    block_start_string = ...  # type: Any
    block_end_string = ...  # type: Any
    variable_start_string = ...  # type: Any
    variable_end_string = ...  # type: Any
    comment_start_string = ...  # type: Any
    comment_end_string = ...  # type: Any
    line_statement_prefix = ...  # type: Any
    line_comment_prefix = ...  # type: Any
    trim_blocks = ...  # type: Any
    lstrip_blocks = ...  # type: Any
    newline_sequence = ...  # type: Any
    keep_trailing_newline = ...  # type: Any
    undefined = ...  # type: Any
    optimized = ...  # type: Any
    finalize = ...  # type: Any
    autoescape = ...  # type: Any
    filters = ...  # type: Any
    tests = ...  # type: Any
    globals = ...  # type: Any
    loader = ...  # type: Any
    cache = ...  # type: Any
    bytecode_cache = ...  # type: Any
    auto_reload = ...  # type: Any
    extensions = ...  # type: Any
    def __init__(self, block_start_string=..., block_end_string=..., variable_start_string=..., variable_end_string=..., comment_start_string=..., comment_end_string=..., line_statement_prefix=..., line_comment_prefix=..., trim_blocks=..., lstrip_blocks=..., newline_sequence=..., keep_trailing_newline=..., extensions=..., optimized=True, undefined=..., finalize=None, autoescape=False, loader=None, cache_size=400, auto_reload=True, bytecode_cache=None) -> None: ...
    def add_extension(self, extension): ...
    def extend(self, **attributes): ...
    def overlay(self, block_start_string=..., block_end_string=..., variable_start_string=..., variable_end_string=..., comment_start_string=..., comment_end_string=..., line_statement_prefix=..., line_comment_prefix=..., trim_blocks=..., lstrip_blocks=..., extensions=..., optimized=..., undefined=..., finalize=..., autoescape=..., loader=..., cache_size=..., auto_reload=..., bytecode_cache=...): ...
    lexer = ...  # type: Any
    def iter_extensions(self): ...
    def getitem(self, obj, argument): ...
    def getattr(self, obj, attribute): ...
    def call_filter(self, name, value, args=None, kwargs=None, context=None, eval_ctx=None): ...
    def call_test(self, name, value, args=None, kwargs=None): ...
    def parse(self, source, name=None, filename=None): ...
    def lex(self, source, name=None, filename=None): ...
    def preprocess(self, source, name=None, filename=None): ...
    def compile(self, source, name=None, filename=None, raw=False, defer_init=False): ...
    def compile_expression(self, source, undefined_to_none=True): ...
    def compile_templates(self, target, extensions=None, filter_func=None, zip='', log_function=None, ignore_errors=True, py_compile=False): ...
    def list_templates(self, extensions=None, filter_func=None): ...
    def handle_exception(self, exc_info=None, rendered=False, source_hint=None): ...
    def join_path(self, template, parent): ...
    def get_template(self, name: str, parent=None, globals=None) -> Template: ...
    def select_template(self, names, parent=None, globals=None): ...
    def get_or_select_template(self, template_name_or_list, parent=None, globals=None): ...
    def from_string(self, source, globals=None, template_class=None): ...
    def make_globals(self, d): ...

class Template:
    def __new__(cls, source, block_start_string=..., block_end_string=..., variable_start_string=..., variable_end_string=..., comment_start_string=..., comment_end_string=..., line_statement_prefix=..., line_comment_prefix=..., trim_blocks=..., lstrip_blocks=..., newline_sequence=..., keep_trailing_newline=..., extensions=..., optimized=True, undefined=..., finalize=None, autoescape=False): ...
    @classmethod
    def from_code(cls, environment, code, globals, uptodate=None): ...
    @classmethod
    def from_module_dict(cls, environment, module_dict, globals): ...
    def render(self, *args, **kwargs) -> str: ...
    def stream(self, *args, **kwargs): ...
    def generate(self, *args, **kwargs): ...
    def new_context(self, vars=None, shared=False, locals=None): ...
    def make_module(self, vars=None, shared=False, locals=None): ...
    @property
    def module(self): ...
    def get_corresponding_lineno(self, lineno): ...
    @property
    def is_up_to_date(self): ...
    @property
    def debug_info(self): ...

class TemplateModule:
    __name__ = ...  # type: Any
    def __init__(self, template, context): ...
    def __html__(self): ...

class TemplateExpression:
    def __init__(self, template, undefined_to_none): ...
    def __call__(self, *args, **kwargs): ...

class TemplateStream:
    def __init__(self, gen): ...
    def dump(self, fp, encoding=None, errors=''): ...
    buffered = ...  # type: Any
    def disable_buffering(self): ...
    def enable_buffering(self, size=5): ...
    def __iter__(self): ...
    def __next__(self): ...
