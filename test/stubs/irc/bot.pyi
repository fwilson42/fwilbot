# Stubs for irc.bot (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc
import irc.modes
from .dict import IRCDict
from typing import Any, Optional


class ServerSpec:
    host: Any = ...
    port: Any = ...
    password: Any = ...

    def __init__(self, host: Any, port: int = ..., password: Optional[Any] = ...) -> None:
        ...

    @classmethod
    def ensure(cls, input: Any):
        ...


class ReconnectStrategy(metaclass=abc.ABCMeta):

    @abc.abstractmethod
    def run(self, bot: Any) -> Any:
        ...


class ExponentialBackoff(ReconnectStrategy):
    min_interval: int = ...
    max_interval: int = ...
    attempt_count: Any = ...

    def __init__(self, **attrs: Any) -> None:
        ...

    bot: Any = ...

    def run(self, bot: Any) -> None:
        ...

    def check(self) -> None:
        ...


missing: Any


class SingleServerIRCBot(irc.client.SimpleIRCClient):
    channels: Any = ...
    servers: Any = ...
    recon: Any = ...

    def __init__(self, server_list: Any, nickname: Any, realname: Any, reconnection_interval: Any = ..., recon: Any = ...,
                 **connect_params: Any) -> None:
        ...

    def die(self, msg: str = ...) -> None:
        ...

    def disconnect(self, msg: str = ...) -> None:
        ...

    def get_version(self):
        ...

    def jump_server(self, msg: str = ...) -> None:
        ...

    def on_ctcp(self, connection: Any, event: Any) -> None:
        ...

    def on_dccchat(self, connection: Any, event: Any) -> None:
        ...

    def start(self) -> None:
        ...


class Channel:
    user_modes: str = ...
    mode_users: Any = ...
    modes: Any = ...

    def __init__(self) -> None:
        ...

    def users(self):
        ...

    def opers(self):
        ...

    def voiced(self):
        ...

    def owners(self):
        ...

    def halfops(self):
        ...

    def admins(self):
        ...

    def has_user(self, nick: Any):
        ...

    def is_oper(self, nick: Any):
        ...

    def is_voiced(self, nick: Any):
        ...

    def is_owner(self, nick: Any):
        ...

    def is_halfop(self, nick: Any):
        ...

    def is_admin(self, nick: Any):
        ...

    def add_user(self, nick: Any) -> None:
        ...

    @property
    def user_dicts(self) -> None:
        ...

    def remove_user(self, nick: Any) -> None:
        ...

    def change_nick(self, before: Any, after: Any) -> None:
        ...

    def set_userdetails(self, nick: Any, details: Any) -> None:
        ...

    def set_mode(self, mode: Any, value: Optional[Any] = ...) -> None:
        ...

    def clear_mode(self, mode: Any, value: Optional[Any] = ...) -> None:
        ...

    def has_mode(self, mode: Any):
        ...

    def is_moderated(self):
        ...

    def is_secret(self):
        ...

    def is_protected(self):
        ...

    def has_topic_lock(self):
        ...

    def is_invite_only(self):
        ...

    def has_allow_external_messages(self):
        ...

    def has_limit(self):
        ...

    def limit(self):
        ...

    def has_key(self):
        ...
