# Stubs for irc.bot (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
import irc.client
from .dict import IRCDict as IRCDict

class ServerSpec:
    host = ...  # type: Any
    port = ...  # type: Any
    password = ...  # type: Any
    def __init__(self, host, port=6667, password=None): ...

class ReconnectStrategy:
    def run(self, bot): ...

class ExponentialBackoff(ReconnectStrategy):
    min_interval = ...  # type: Any
    max_interval = ...  # type: Any
    attempt_count = ...  # type: Any
    def __init__(self, **attrs): ...
    bot = ...  # type: Any
    def run(self, bot): ...
    def check(self): ...

missing = ...  # type: Any

class SingleServerIRCBot(irc.client.SimpleIRCClient):
    channels = ...  # type: Any
    server_list = ...  # type: Any
    recon = ...  # type: Any
    def __init__(self, server_list, nickname, realname, reconnection_interval=..., recon=..., **connect_params): ...
    def die(self, msg=''): ...
    def disconnect(self, msg=''): ...
    def get_version(self): ...
    def jump_server(self, msg=''): ...
    def on_ctcp(self, c, e): ...
    def on_dccchat(self, c, e): ...
    def start(self) -> None: ...

class Channel:
    user_modes = ...  # type: Any
    mode_users = ...  # type: Any
    modes = ...  # type: Any
    def __init__(self): ...
    def users(self): ...
    def opers(self): ...
    def voiced(self): ...
    def owners(self): ...
    def halfops(self): ...
    def admins(self): ...
    def has_user(self, nick): ...
    def is_oper(self, nick): ...
    def is_voiced(self, nick): ...
    def is_owner(self, nick): ...
    def is_halfop(self, nick): ...
    def is_admin(self, nick): ...
    def add_user(self, nick): ...
    @property
    def user_dicts(self): ...
    def remove_user(self, nick): ...
    def change_nick(self, before, after): ...
    def set_userdetails(self, nick, details): ...
    def set_mode(self, mode, value=None): ...
    def clear_mode(self, mode, value=None): ...
    def has_mode(self, mode): ...
    def is_moderated(self): ...
    def is_secret(self): ...
    def is_protected(self): ...
    def has_topic_lock(self): ...
    def is_invite_only(self): ...
    def has_allow_external_messages(self): ...
    def has_limit(self): ...
    def limit(self): ...
    def has_key(self): ...
