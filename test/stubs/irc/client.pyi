# Stubs for irc.client (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
import six
from . import functools as irc_functools

log = ...  # type: Any
VERSION_STRING = ...  # type: Any
VERSION = ...  # type: Any


class IRCError(Exception):
    ...


class InvalidCharacters(ValueError):
    ...


class MessageTooLong(ValueError):
    ...


class PrioritizedHandler:

    def __lt__(self, other):
        ...


class Reactor:
    scheduler_class = ...  # type: Any
    scheduler = ...  # type: Any
    connections = ...  # type: Any
    handlers = ...  # type: Any
    mutex = ...  # type: Any

    def __init__(self, on_connect=..., on_disconnect=...):
        ...

    def server(self):
        ...

    def process_data(self, sockets):
        ...

    def process_timeout(self):
        ...

    @property
    def sockets(self):
        ...

    def process_once(self, timeout=0):
        ...

    def process_forever(self, timeout=0.0):
        ...

    def disconnect_all(self, message=''):
        ...

    def add_global_handler(self, event, handler, priority=0):
        ...

    def remove_global_handler(self, event, handler):
        ...

    def execute_at(self, at, function, arguments=...):
        ...

    def execute_delayed(self, delay, function, arguments=...):
        ...

    def execute_every(self, period, function, arguments=...):
        ...

    def dcc(self, dcctype=''):
        ...


class Connection:

    def socket(self):
        ...

    reactor = ...  # type: Any

    def __init__(self, reactor):
        ...

    def execute_at(self, at, function, arguments=...):
        ...

    def execute_delayed(self, delay, function, arguments=...):
        ...

    def execute_every(self, period, function, arguments=...):
        ...


class ServerConnectionError(IRCError):
    ...


class ServerNotConnectedError(ServerConnectionError):
    ...


class ServerConnection(Connection):
    buffer_class = ...  # type: Any
    socket = ...  # type: Any
    connected = ...  # type: Any
    features = ...  # type: Any

    def __init__(self, reactor):
        ...

    buffer = ...  # type: Any
    handlers = ...  # type: Any
    real_server_name = ...  # type: Any
    real_nickname = ...  # type: Any
    server = ...  # type: Any
    port = ...  # type: Any
    server_address = ...  # type: Any
    nickname = ...  # type: Any
    username = ...  # type: Any
    ircname = ...  # type: Any
    password = ...  # type: Any
    connect_factory = ...  # type: Any

    def connect(self, server, port, nickname, password=None, username=None, ircname=None, connect_factory=...):
        ...

    def reconnect(self):
        ...

    def close(self):
        ...

    def get_server_name(self):
        ...

    def get_nickname(self):
        ...

    def as_nick(self, name):
        ...

    def process_data(self):
        ...

    def is_connected(self):
        ...

    def add_global_handler(self, *args):
        ...

    def remove_global_handler(self, *args):
        ...

    def action(self, target, action):
        ...

    def admin(self, server=''):
        ...

    def cap(self, subcommand, *args):
        ...

    def ctcp(self, ctcptype, target, parameter=''):
        ...

    def ctcp_reply(self, target, parameter):
        ...

    def disconnect(self, message=''):
        ...

    def globops(self, text):
        ...

    def info(self, server=''):
        ...

    def invite(self, nick, channel):
        ...

    def ison(self, nicks):
        ...

    def join(self, channel, key=''):
        ...

    def kick(self, channel, nick, comment=''):
        ...

    def links(self, remote_server='', server_mask=''):
        ...

    def list(self, channels=None, server=''):
        ...

    def lusers(self, server=''):
        ...

    def mode(self, target, command):
        ...

    def motd(self, server=''):
        ...

    def names(self, channels=None):
        ...

    def nick(self, newnick):
        ...

    def notice(self, target, text):
        ...

    def oper(self, nick, password):
        ...

    def part(self, channels, message=''):
        ...

    def pass_(self, password):
        ...

    def ping(self, target, target2=''):
        ...

    def pong(self, target, target2=''):
        ...

    def privmsg(self, target: str, text: str) -> None:
        ...

    def privmsg_many(self, targets, text):
        ...

    def quit(self, message=''):
        ...

    def send_raw(self, string):
        ...

    def squit(self, server, comment=''):
        ...

    def stats(self, statstype, server=''):
        ...

    def time(self, server=''):
        ...

    def topic(self, channel, new_topic=None):
        ...

    def trace(self, target=''):
        ...

    def user(self, username, realname):
        ...

    def userhost(self, nicks):
        ...

    def users(self, server=''):
        ...

    def version(self, server=''):
        ...

    def wallops(self, text):
        ...

    def who(self, target='', op=''):
        ...

    def whois(self, targets):
        ...

    def whowas(self, nick, max='', server=''):
        ...

    def set_rate_limit(self, frequency):
        ...

    def set_keepalive(self, interval):
        ...


class DCCConnectionError(IRCError):
    ...


class DCCConnection(Connection):
    socket = ...  # type: Any
    connected = ...  # type: Any
    passive = ...  # type: Any
    dcctype = ...  # type: Any
    peeraddress = ...  # type: Any
    peerport = ...  # type: Any

    def __init__(self, reactor, dcctype):
        ...

    buffer = ...  # type: Any
    handlers = ...  # type: Any

    def connect(self, address, port):
        ...

    def listen(self):
        ...

    def disconnect(self, message=''):
        ...

    def process_data(self):
        ...

    def privmsg(self, text):
        ...

    def send_bytes(self, bytes):
        ...


class SimpleIRCClient:
    reactor_class = ...  # type: Any
    reactor = ...  # type: Any
    connection = ...  # type: Any
    dcc_connections = ...  # type: Any

    def __init__(self) -> None:
        ...

    def connect(self, *args, **kwargs) -> None:
        ...

    def dcc_connect(self, address, port, dcctype=''):
        ...

    def dcc_listen(self, dcctype=''):
        ...

    def start(self) -> None:
        ...


class Event:
    type = ...  # type: Any
    source = ...  # type: Any
    target = ...  # type: Any
    arguments = ...  # type: Any
    tags = ...  # type: Any

    def __init__(self, type, source, target, arguments=None, tags=None) -> None:
        ...


def is_channel(string):
    ...


def ip_numstr_to_quad(num):
    ...


def ip_quad_to_numstr(quad):
    ...


class NickMask(six.text_type):

    @classmethod
    def from_params(cls, nick, user, host):
        ...

    @property
    def nick(self):
        ...

    @property
    def userhost(self):
        ...

    @property
    def host(self):
        ...

    @property
    def user(self):
        ...

    @classmethod
    def from_group(cls, group):
        ...
